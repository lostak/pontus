// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sea/pool_pair.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PoolPair struct {
	AlphaDenom  string                                 `protobuf:"bytes,1,opt,name=alphaDenom,proto3" json:"alphaDenom,omitempty"`
	BetaDenom   string                                 `protobuf:"bytes,2,opt,name=betaDenom,proto3" json:"betaDenom,omitempty"`
	AlphaAmount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=alphaAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"alphaAmount"`
	BetaAmount  github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,opt,name=betaAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"betaAmount"`
	ShareAmount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,5,opt,name=shareAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"shareAmount"`
	SwapFee     github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,6,opt,name=swapFee,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"swapFee"`
	ExitFee     github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,7,opt,name=exitFee,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"exitFee"`
}

func (m *PoolPair) Reset()         { *m = PoolPair{} }
func (m *PoolPair) String() string { return proto.CompactTextString(m) }
func (*PoolPair) ProtoMessage()    {}
func (*PoolPair) Descriptor() ([]byte, []int) {
	return fileDescriptor_50d2a0c575befe3d, []int{0}
}
func (m *PoolPair) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PoolPair) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PoolPair.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PoolPair) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PoolPair.Merge(m, src)
}
func (m *PoolPair) XXX_Size() int {
	return m.Size()
}
func (m *PoolPair) XXX_DiscardUnknown() {
	xxx_messageInfo_PoolPair.DiscardUnknown(m)
}

var xxx_messageInfo_PoolPair proto.InternalMessageInfo

func (m *PoolPair) GetAlphaDenom() string {
	if m != nil {
		return m.AlphaDenom
	}
	return ""
}

func (m *PoolPair) GetBetaDenom() string {
	if m != nil {
		return m.BetaDenom
	}
	return ""
}

func init() {
	proto.RegisterType((*PoolPair)(nil), "VelaChain.pontus.sea.PoolPair")
}

func init() { proto.RegisterFile("sea/pool_pair.proto", fileDescriptor_50d2a0c575befe3d) }

var fileDescriptor_50d2a0c575befe3d = []byte{
	// 300 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0xd2, 0x3d, 0x4e, 0xc3, 0x30,
	0x14, 0x07, 0xf0, 0x84, 0x42, 0x4b, 0xcd, 0x66, 0x3a, 0x54, 0x08, 0xb9, 0x88, 0x01, 0x58, 0xb0,
	0x07, 0x4e, 0xd0, 0x52, 0x21, 0x58, 0x50, 0xd5, 0x81, 0x81, 0x05, 0x39, 0xe1, 0x29, 0x89, 0x48,
	0xf2, 0xac, 0xd8, 0x11, 0xe5, 0x16, 0x1c, 0xab, 0x63, 0x46, 0xc4, 0x50, 0xa1, 0xe4, 0x22, 0xc8,
	0x69, 0x80, 0xac, 0x64, 0xb2, 0xf5, 0x3e, 0x7e, 0x7a, 0xc3, 0x9f, 0x1c, 0x6a, 0x90, 0x42, 0x21,
	0xc6, 0x4f, 0x4a, 0x46, 0x19, 0x57, 0x19, 0x1a, 0xa4, 0xa3, 0x07, 0x88, 0xe5, 0x75, 0x28, 0xa3,
	0x94, 0x2b, 0x4c, 0x4d, 0xae, 0xb9, 0x06, 0x79, 0x34, 0x0a, 0x30, 0xc0, 0x7a, 0x40, 0xd8, 0xdf,
	0x76, 0xf6, 0xb4, 0xe8, 0x91, 0xfd, 0x05, 0x62, 0xbc, 0x90, 0x51, 0x46, 0x19, 0x21, 0x32, 0x56,
	0xa1, 0x9c, 0x43, 0x8a, 0xc9, 0xd8, 0x3d, 0x71, 0x2f, 0x86, 0xcb, 0x56, 0x85, 0x1e, 0x93, 0xa1,
	0x07, 0xa6, 0x69, 0xef, 0xd4, 0xed, 0xbf, 0x02, 0x5d, 0x90, 0x83, 0x7a, 0x76, 0x9a, 0x60, 0x9e,
	0x9a, 0x71, 0xcf, 0xf6, 0x67, 0x7c, 0xbd, 0x99, 0x38, 0x9f, 0x9b, 0xc9, 0x59, 0x10, 0x99, 0x30,
	0xf7, 0xb8, 0x8f, 0x89, 0xf0, 0x51, 0x27, 0xa8, 0x9b, 0xe7, 0x52, 0x3f, 0xbf, 0x08, 0xf3, 0xa6,
	0x40, 0xf3, 0xbb, 0xd4, 0x2c, 0xdb, 0x04, 0xbd, 0x27, 0xc4, 0xf2, 0x0d, 0xb8, 0xdb, 0x09, 0x6c,
	0x09, 0xf6, 0x42, 0x1d, 0xca, 0x0c, 0x1a, 0x70, 0xaf, 0xdb, 0x85, 0x2d, 0x82, 0xde, 0x92, 0x81,
	0x7e, 0x95, 0xea, 0x06, 0x60, 0xdc, 0xff, 0xb7, 0x36, 0x07, 0x7f, 0xf9, 0xb3, 0x6e, 0x25, 0x58,
	0x45, 0xc6, 0x4a, 0x83, 0x6e, 0x52, 0xb3, 0x3e, 0x9b, 0xae, 0x4b, 0xe6, 0x16, 0x25, 0x73, 0xbf,
	0x4a, 0xe6, 0xbe, 0x57, 0xcc, 0x29, 0x2a, 0xe6, 0x7c, 0x54, 0xcc, 0x79, 0x3c, 0x6f, 0x51, 0xbf,
	0x19, 0x11, 0xdb, 0x8c, 0x88, 0x95, 0xb0, 0x59, 0xaa, 0x3d, 0xaf, 0x5f, 0x87, 0xe3, 0xea, 0x3b,
	0x00, 0x00, 0xff, 0xff, 0xf4, 0xd7, 0x83, 0x8f, 0x5f, 0x02, 0x00, 0x00,
}

func (m *PoolPair) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PoolPair) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PoolPair) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.ExitFee.Size()
		i -= size
		if _, err := m.ExitFee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPoolPair(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size := m.SwapFee.Size()
		i -= size
		if _, err := m.SwapFee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPoolPair(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.ShareAmount.Size()
		i -= size
		if _, err := m.ShareAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPoolPair(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.BetaAmount.Size()
		i -= size
		if _, err := m.BetaAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPoolPair(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.AlphaAmount.Size()
		i -= size
		if _, err := m.AlphaAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPoolPair(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.BetaDenom) > 0 {
		i -= len(m.BetaDenom)
		copy(dAtA[i:], m.BetaDenom)
		i = encodeVarintPoolPair(dAtA, i, uint64(len(m.BetaDenom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AlphaDenom) > 0 {
		i -= len(m.AlphaDenom)
		copy(dAtA[i:], m.AlphaDenom)
		i = encodeVarintPoolPair(dAtA, i, uint64(len(m.AlphaDenom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPoolPair(dAtA []byte, offset int, v uint64) int {
	offset -= sovPoolPair(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PoolPair) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AlphaDenom)
	if l > 0 {
		n += 1 + l + sovPoolPair(uint64(l))
	}
	l = len(m.BetaDenom)
	if l > 0 {
		n += 1 + l + sovPoolPair(uint64(l))
	}
	l = m.AlphaAmount.Size()
	n += 1 + l + sovPoolPair(uint64(l))
	l = m.BetaAmount.Size()
	n += 1 + l + sovPoolPair(uint64(l))
	l = m.ShareAmount.Size()
	n += 1 + l + sovPoolPair(uint64(l))
	l = m.SwapFee.Size()
	n += 1 + l + sovPoolPair(uint64(l))
	l = m.ExitFee.Size()
	n += 1 + l + sovPoolPair(uint64(l))
	return n
}

func sovPoolPair(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPoolPair(x uint64) (n int) {
	return sovPoolPair(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PoolPair) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPoolPair
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PoolPair: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PoolPair: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AlphaDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolPair
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPoolPair
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPoolPair
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AlphaDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BetaDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolPair
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPoolPair
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPoolPair
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BetaDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AlphaAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolPair
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPoolPair
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPoolPair
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AlphaAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BetaAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolPair
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPoolPair
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPoolPair
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BetaAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShareAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolPair
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPoolPair
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPoolPair
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ShareAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwapFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolPair
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPoolPair
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPoolPair
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SwapFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExitFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolPair
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPoolPair
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPoolPair
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ExitFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPoolPair(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPoolPair
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPoolPair(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPoolPair
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPoolPair
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPoolPair
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPoolPair
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPoolPair
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPoolPair
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPoolPair        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPoolPair          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPoolPair = fmt.Errorf("proto: unexpected end of group")
)
